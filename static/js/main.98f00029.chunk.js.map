{"version":3,"sources":["helpers/api.js","components/NoteForm.js","components/Note.js","components/NoteList.js","containers/NoteApp.js","App.js","reportWebVitals.js","index.js"],"names":["api","getNotes","fetch","NoteForm","editMode","value","id","onDone","onCancelEdit","textboxRef","useRef","useState","text","setText","useEffect","current","focus","select","cancelBtn","className","onClick","length","addOrEditBtn","buttonText","renderAddOrEditBtn","rows","placeholder","ref","onChange","e","target","Note","props","onEdit","onDelete","NoteList","list","notes","map","note","NoteApp","currentId","notesStore","setNotesStore","handleEdit","updatedNotes","n","oldNotesStore","handleAddEdit","console","log","trim","then","res","json","largestId","filter","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.98f00029.chunk.js","sourcesContent":["const MOCK_NOTES_URL = \"mock-notes.json\";\n\nconst api = {\n  getNotes() {\n    return fetch(MOCK_NOTES_URL);\n  },\n};\n\nexport default api;\n","import React, { useRef, useState, useEffect } from \"react\";\n\nimport \"../note.css\";\n\n//destructure the props value out\n//at the same time, we can set the default value\nfunction NoteForm({\n  editMode = false,\n  value = \"\",\n  id = 0,\n  onDone,\n  onCancelEdit,\n}) {\n  const textboxRef = useRef();\n  const [text, setText] = useState(value);\n\n  useEffect(() => {\n    textboxRef.current.focus();\n    textboxRef.current.select();\n  }, []);\n\n  function resetState() {\n    setText(value);\n  }\n\n  function renderCancelBtn() {\n    if (editMode) {\n      //edit mode\n      return (\n        <div className=\"note-form-cancel\">\n          <button onClick={() => onCancelEdit(id)}>Cancel</button>\n        </div>\n      );\n    } else {\n      //add new mode\n      if (text.length > 0) {\n        return (\n          <div className=\"note-form-cancel\">\n            <button\n              onClick={() => {\n                setText(\"\");\n              }}\n            >\n              Cancel\n            </button>\n          </div>\n        );\n      } else {\n        return \"\";\n      }\n    }\n  } //end renderCancelBtn\n\n  function renderAddOrEditBtn() {\n    let buttonText = \"Add\";\n\n    if (editMode) {\n      buttonText = \"Confirm Edit\";\n    }\n\n    return (\n      <div className=\"note-form-add\">\n        <button\n          onClick={() => {\n            onDone({\n              id: id,\n              value: text,\n            });\n            resetState();\n          }}\n        >\n          {buttonText}\n        </button>\n      </div>\n    );\n  } //end renderAddOrEditBtn\n\n  const cancelBtn = renderCancelBtn();\n  const addOrEditBtn = renderAddOrEditBtn();\n\n  return (\n    <div className=\"note-form-container\">\n      <textarea\n        className=\"note-form\"\n        rows=\"3\"\n        placeholder=\"Enter note\"\n        ref={textboxRef}\n        value={text}\n        onChange={(e) => {\n          setText(e.target.value);\n        }}\n      ></textarea>\n      {cancelBtn}\n      {addOrEditBtn}\n    </div>\n  );\n}\n\nexport default NoteForm;\n","import React from \"react\";\nimport \"../note.css\";\n\nfunction Note(props) {\n  return (\n    <div className=\"notes-entry\">\n      <div className=\"notes-entry-body\">{props.value}</div>\n      <div className=\"notes-entry-action\">\n        <button onClick={(e) => props.onEdit(props.id)}>edit</button>\n        <button onClick={(e) => props.onDelete(props.id)}>delete</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Note;\n","import React from \"react\";\nimport Note from \"./Note\";\nimport NoteForm from \"./NoteForm\";\n\nfunction NoteList(props) {\n  const list = props.notes.map((note) => {\n    if (note.editMode) {\n      return (\n        <NoteForm\n          key={note.id}\n          id={note.id}\n          value={note.value}\n          editMode={note.editMode}\n          onCancelEdit={(id) => props.onEdit(id, false)}\n          onDone={props.onDone}\n        />\n      );\n    } else {\n      return (\n        <Note\n          key={note.id}\n          id={note.id}\n          value={note.value}\n          onEdit={(id) => props.onEdit(id, true)}\n          onDelete={props.onDelete}\n        />\n      );\n    }\n  });\n  return (\n    <div>\n      <h3>List of notes:</h3>\n      <div className=\"notes-entry-container\">{list}</div>\n    </div>\n  );\n}\n\nexport default NoteList;\n","import React, { useEffect, useState } from \"react\";\nimport api from \"../helpers/api\";\nimport NoteForm from \"../components/NoteForm\";\nimport NoteList from \"../components/NoteList\";\n\nfunction NoteApp() {\n  //used to capture the notes\n  //the next id to use will be currentId + 1\n  //since we are most likely updating the notes and id together, we will combine\n  const [notesStore, setNotesStore] = useState({ notes: [], currentId: 0 });\n\n  //load once when mounted\n  //call API to fetch the notes\n  useEffect(() => {\n    api\n      .getNotes()\n      .then((res) => res.json())\n      .then((notes) => {\n        let largestId = -1;\n        for (const note of notes) {\n          if (note.id > largestId) {\n            largestId = note.id;\n          }\n        }\n\n        setNotesStore({ notes, currentId: largestId });\n      });\n  }, []);\n\n  //handlers\n  function handleEdit(id, editMode) {\n    const { notes } = notesStore;\n    const updatedNotes = notes.map((n) => {\n      if (n.id === id) {\n        n.editMode = editMode;\n      }\n      return n;\n    });\n\n    setNotesStore((oldNotesStore) => ({\n      currentId: oldNotesStore.currentId,\n      notes: updatedNotes,\n    }));\n  } //end handleEdit\n\n  function handleDelete(id) {\n    const { notes } = notesStore;\n    const updatedNotes = notes.filter((n) => {\n      return n.id !== id;\n    });\n\n    setNotesStore((oldNotesStore) => ({\n      currentId: oldNotesStore.currentId,\n      notes: updatedNotes,\n    }));\n\n    console.log(\"###updatedNotes: \", updatedNotes);\n  } //end handleDelete\n\n  function handleAddEdit(note) {\n    console.log(\"###in handleAddEdit \", note);\n    const { currentId, notes } = notesStore;\n    if (note.id === 0) {\n      //add action\n      if (note.value.trim() === \"\") return;\n\n      note.id = currentId + 1;\n\n      setNotesStore({\n        currentId: note.id,\n        notes: [...notes, note],\n      });\n    } else {\n      //edit action\n      if (note.value.trim() === \"\") {\n        //cancel edit\n        handleEdit(note.id, false);\n        return;\n      } else {\n        //find the note\n        const updatedNotes = notes.map((n) => {\n          if (n.id === note.id) {\n            note.editMode = false;\n            return note;\n          } else {\n            return n;\n          }\n        });\n\n        setNotesStore((oldNotesStore) => ({\n          currentId: oldNotesStore.currentId,\n          notes: updatedNotes,\n        }));\n      }\n    }\n  }\n  //-------\n\n  const { notes } = notesStore;\n  return (\n    <div className=\"note-container\">\n      <NoteForm onDone={handleAddEdit} />\n      <br />\n      <br />\n      <NoteList\n        notes={notes}\n        onEdit={handleEdit}\n        onDelete={handleDelete}\n        onDone={handleAddEdit}\n      />\n    </div>\n  );\n}\n\nexport default NoteApp;\n","import \"./App.css\";\nimport NoteApp from \"./containers/NoteApp\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <h2>Welcome to IS3106 Note App</h2>\n      </div>\n      <br />\n      <br />\n      <NoteApp />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}